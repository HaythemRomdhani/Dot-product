PROCEDURE dot_product(V1,V2)
VAR
    V1,V2:ARRAY_OF FLOAT[] ;
    i: INTEGER ;
    ps: FLOAT =0;
BEGIN
    FOR i FROM 0 TO lengthV1-1  DO
        Read (V1[i]);
    END_FOR 
    FOR i FROM 0 TO lengthV2-1  DO
        Read (V2[i]);
    END_FOR 
    FOR i FROM 0 TO lengthV1-1  DO
        ps = ps + V1[i]*V2[i] ;
    END_FOR  
END
FUNCTION dot_product(V1,V2) : FLOAT 
VAR
    V1,V2:ARRAY_OF FLOAT[] ;
    i: INTEGER ;
    ps: FLOAT =0;
BEGIN
    FOR i FROM 0 TO lengthV1-1  DO
        Read (V1[i]);
    END_FOR 
    FOR i FROM 0 TO lengthV2-1  DO
        Read (V2[i]);
    END_FOR 
    FOR i FROM 0 TO lengthV1-1  DO
        ps = ps + V1[i]*V2[i] ;
    END_FOR 
    RETURN ps ; 
END
ALGORITHM orthogonal vectors    
VAR
    V1,V2 : ARRAY_OF FLOAT[] ; 
    i , n  : INTEGER ;
    Ps : FLOAT ;
BEGIN
    REPEAT
        write ("enter the number of vectors");
        read (n);
    UNTIL ( (n >= 2) AND (n % 2 =0))
    FOR i FROM 0 TO n STEP 1  DO
        read (V1);
        read (V2);
            Ps := dot_product (V1,V2);
    IF (Ps=0) THEN
        write ("the vectors are orthogonal");
    ELSE
        write ("the vectors are not orthogonal");
    END_FOR
   
END

